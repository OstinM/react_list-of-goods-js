{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","sortMethod","App","useState","sortOrder","setSortOrder","isReversed","setIsReversed","sortGoodsList","goods","preparedGoods","sort","a","b","length","localeCompare","reverse","getSortedList","shouldShowResetButton","className","type","cn","onClick","prevValue","map","goodsItem","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EACM,eADNA,EAEI,SAFJA,EAGS,GA0BR,IAAMC,EAAM,WACjB,MAAkCC,mBAASF,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA1BR,SAAuBC,EAAvB,GAA0D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACnCI,EAAa,YAAOD,GAE1B,OAAQL,GACN,KAAKH,EACHS,EAAcC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAC1C,MAEF,KAAKb,EACHS,EAAcC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,cAAcF,MAWjD,OAJIP,GACFI,EAAcM,UAGTN,EAMeO,CAAcjB,EAAiB,CACnDI,YAAWE,eAIPY,EAAwBZ,GAAcF,EAO5C,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,IAAcH,IAE5BqB,QAAS,kBACPjB,EAAaJ,IANjB,iCAYA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,IAAcH,IAE5BqB,QAAS,kBACPjB,EAAaJ,IANjB,4BAYA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAaf,IAEfgB,QAxCoB,kBAAMf,GAAc,SAAAgB,GAAS,OAAKA,MAmCxD,qBAUEL,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA9CU,WAClBf,GAAc,GACdF,EAAaJ,IAyCP,sBAUJ,6BACGO,EAAcgB,KAAI,SAAAC,GAAS,OAC1B,oBAAoB,UAAQ,OAA5B,SACGA,GADMA,YC7GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4ee8a853.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst sortMethod = {\n  Alphabet: 'alphabetical',\n  Length: 'length',\n  defaultSort: '',\n};\n\nfunction getSortedList(goods, { sortOrder, isReversed }) {\n  const preparedGoods = [...goods];\n\n  switch (sortOrder) {\n    case sortMethod.Length:\n      preparedGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    case sortMethod.Alphabet:\n      preparedGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortOrder, setSortOrder] = useState(sortMethod.defaultSort);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortGoodsList = getSortedList(goodsFromServer, {\n    sortOrder, isReversed,\n  });\n\n  const handleToggleReverse = () => setIsReversed(prevValue => !prevValue);\n  const shouldShowResetButton = isReversed || sortOrder;\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortOrder(sortMethod.defaultSort);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortOrder !== sortMethod.Alphabet,\n          })}\n          onClick={() => (\n            setSortOrder(sortMethod.Alphabet)\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortOrder !== sortMethod.Length,\n          })}\n          onClick={() => (\n            setSortOrder(sortMethod.Length)\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleToggleReverse}\n        >\n          Reverse\n        </button>\n\n        {(shouldShowResetButton) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortGoodsList.map(goodsItem => (\n          <li key={goodsItem} data-cy=\"Good\">\n            {goodsItem}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}